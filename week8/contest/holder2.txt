int dp[N][N];
int aux[N][N];

int v[N];
int w[N];
//F = num of items taken
//S.F = if current item was taken into the array
//S.S = previous item.
 pair<bool,int> aux[N];


int W,n;

void sol(){

    
    aux[0][0] = 0;

    FOR(i, 1, n){
        

        FOR(j,1, W){            

            if(dp[i-1][j] > dp[i][j] ){
                dp[i][j] = dp[i-1][j];

                aux[i][j] = aux[i-1][j];
            }

            if(w[i] <= j && dp[i][j] <= dp[i-1][j - w[i]] + v[i]){
                dp[i][j] = dp[i-1][j - w[i]] + v[i];
                
                aux[i].F = true;
                // si es el primer item tomado
                if(dp[i-1][j - w[i]] == 0){
                    aux[i].S = i;
                }
                else{
                    aux[i].S =  i-1;
                }
            }
        }

        // printf("(p%d:%d) [%d,%d],", i, dp[i][W], aux[i].F, aux[i].S);

    }
    cout<<'\n';



    FOR(i, 1, n){
        printf("p%d (%d,%d) dp[%d],", i, aux[i].F, aux[i].S, dp[i][W]);
    }
    cout<<'\n';

    int i = n;

    while(i != aux[i].S){
        if(aux[i].F) cout<<i<<" ";
        i = aux[i].S;
    }

    cout<<'\n';


    cout<<dp[n][W]<<'\n';
}


int main(int argc, char const *argv[]) {
    
    int t;

    
    while(cin>>W){
        cin>>n;

        FOR(i,1,n) cin>>v[i]>>w[i];
        memset(dp, 0,N*N );
        sol();
    }
   

    return 0;
}